*SISTEMA DE RIEGO* 

#include <WiFi.h>
#include <HTTPClient.h>
#include <PubSubClient.h>
#include "time.h"

#define BOMBA_RIEGO_PIN 23

const char* ssid = "5B";
const char* password = "18988932";

const char* mqtt_server = "broker.emqx.io";
const char* client_id = "Demeter2025-Riego";
const char* topico_estado = "UTT/DEMETER/RIEGO";

WiFiClient espClient;
PubSubClient client(espClient);

const char* serverURL = "https://demeteryesi.loca.lt/api/sensors";

const unsigned long tiempoEncendida = 20000;
const unsigned long tiempoApagada = 5000;

unsigned long tiempoAnterior = 0;
int fase = 0;
int areaActual = 0;

void setup() {
  pinMode(BOMBA_RIEGO_PIN, OUTPUT);
  digitalWrite(BOMBA_RIEGO_PIN, LOW);
  Serial.begin(115200);

  WiFi.begin(ssid, password);
  Serial.print("Conectando a WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\nConectado a WiFi");

  configTime(0, 0, "pool.ntp.org");

  client.setServer(mqtt_server, 1883);
  reconnect();

  Serial.println("Sistema de riego intercalado listo.");
}

void loop() {
  if (!client.connected()) {
    reconnect();
  }
  client.loop();

  unsigned long tiempoActual = millis();
  String areaNombre = getAreaName(areaActual);

  if (fase == 0 && tiempoActual - tiempoAnterior >= tiempoApagada) {
    digitalWrite(BOMBA_RIEGO_PIN, HIGH);
    Serial.println("Bomba ACTIVADA en Área " + areaNombre);
    enviarEstado("BombaRiego", "ACTIVADA", areaNombre);
    client.publish(topico_estado, (areaNombre + ":ACTIVADA").c_str());
    tiempoAnterior = tiempoActual;
    fase = 1;
  }

  if (fase == 1 && tiempoActual - tiempoAnterior >= tiempoEncendida) {
    digitalWrite(BOMBA_RIEGO_PIN, LOW);
    Serial.println("Bomba APAGADA en Área " + areaNombre);
    enviarEstado("BombaRiego", "APAGADA", areaNombre);
    client.publish(topico_estado, (areaNombre + ":APAGADA").c_str());
    tiempoAnterior = tiempoActual;
    fase = 0;

    areaActual = (areaActual + 1) % 3;
  }
}

String getAreaName(int areaId) {
  switch (areaId) {
    case 0: return "A";
    case 1: return "B";
    case 2: return "C";
    default: return "Desconocida";
  }
}

void enviarEstado(String tipo, String estado, String area) {
  if (WiFi.status() == WL_CONNECTED) {
    HTTPClient http;
    http.begin(serverURL);
    http.addHeader("Content-Type", "application/json");

    String json = "{\"deviceId\":\"ESP32-002\",\"name\":\"" + tipo + "\",\"status\":\"" + estado + "\",\"area\":\"Area " + area + "\",\"createdAt\":\"" + getFechaISO() + "\",\"values\":{}}";
    Serial.println(" Enviando JSON: " + json);

    int httpResponseCode = http.POST(json);

    Serial.println(httpResponseCode > 0 ? " Enviado. Código: " + String(httpResponseCode) : " Error: " + http.errorToString(httpResponseCode));

    http.end();
  } else {
    Serial.println(" No hay WiFi. No se pudo enviar estado.");
  }
}

String getFechaISO() {
  struct tm timeinfo;
  if (!getLocalTime(&timeinfo)) {
    return "";
  }
  char timeString[30];
  strftime(timeString, sizeof(timeString), "%Y-%m-%dT%H:%M:%SZ", &timeinfo);
  return String(timeString);
}

void reconnect() {
  while (!client.connected()) {
    Serial.print("Conectando al broker MQTT...");
    if (client.connect(client_id)) {
      Serial.println("¡Conectado a MQTT!");
    } else {
      Serial.print("Error MQTT: ");
      Serial.println(client.state());
      delay(2000);
    }
  }
}